# Q1. WHO IS THE SENIOR MOST EMPLOYEE BEST ON THE JOB TITLE?
SELECT LAST_NAME, FIRST_NAME,LEVELS FROM EMPLOYEE ORDER BY LEVELS DESC LIMIT 1
# Q2. WHICH COUNTRIES HAVE MOST INVOICES?
SELECT COUNT(*) AS C,BILLING_COUNTRY FROM INVOICE GROUP BY BILLING_COUNTRY ORDER BY C DESC 
#Q3.WHAT ARE TOP 3 VALUES OF TOTAL INVOICE?
SELECT TOTAL FROM INVOICE ORDER BY TOTAL DESC LIMIT 3
#Q4. WHICH CITY HAS THE BEST CUSTOMERS? WE WOULD LIKE TO THROW A 
PROMOTIONAL MUSIC FESTIVAL IN THE CITY THAT HAS THE HIGHEST SUM OF INVOICES TOTALS. 
RETURN BOTH THE CITY NAME & SUM OF ALL INVOICE TABLES.
SELECT SUM(TOTAL) AS INVOICE_TOTAL,BILLING_CITY FROM INVOICE GROUP BY BILLING_CITY
ORDER BY INVOICE_TOTAL DESC
#Q5. WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO HAS SPENT THE MOST MONEY WILL BE DECLAIRED THE CUSTOMER.
WRITE A QUERY THAT RETURNS THE PERSON WHO HAS SPENT THE MOST MONEY.
SELECT CUSTOMER.CUSTOMER_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME , SUM(INVOICE.TOTAL) AS INVOICE_TOTAL FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID GROUP BY CUSTOMER.CUSTOMER_ID ORDER BY INVOICE_TOTAL DESC LIMIT 1
#Q6. WRITE A QUERY TO RETURN THE EMAIL, FIRST NAME , LAST NAME & GENRE OF ALL ROCK MUSIC LISTENERS.
RETURN YOUR LIST ORDERED ALPHABETICALLY BY EMAIL STATING WITH A.
SELECT DISTINCT EMAIL, FIRST_NAME, LAST_NAME FROM CUSTOMER
JOIN INVOICE ON CUSTOMER.CUSTOMER_ID=INVOICE.CUSTOMER_ID
JOIN INVOICE_LINE ON INVOICE.INVOICE_ID=INVOICE_LINE.INVOICE_ID  
WHERE TRACK_ID IN(SELECT TRACK_ID FROM TRACK 
				JOIN GENRE ON TRACK.GENRE_ID=GENRE.GENRE_ID
				WHERE GENRE.NAME LIKE 'Rock') ORDER BY EMAIL;
# Q7. LETS INVITE THE ARTIST WHO HAVE WRITTEN THE MOST ROCK MUSIC IN OUR DATASET. 
WRITE A QUERY THAT RETURNS THE ARTIST NAME AND TOTAL COUNT OF THE 10 ROCK BANDS.
SELECT ARTIST.ARTIST_ID, ARTIST.NAME, COUNT(ARTIST.ARTIST_ID)AS NUM_SONGS
FROM TRACK
JOIN ALBUM ON ALBUM.ALBUM_ID=TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID=ALBUM.ALBUM_ID
JOIN GENRE ON GENRE.GENRE_ID=TRACK.GENRE_ID
WHERE GENRE.NAME LIKE 'Rock'
GROUP BY ARTIST.ARTIST_ID ORDER BY NUM_SONGS DESC LIMIT 10
#Q8. WRITTEN ALL THE TRACK NAME THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE SONG LENGTH.
RETURN THE NAME AND MILISECONDS FOR EACH TRACK. 
ORDER BY THE SONG LENGTH WITH THE LONGEST SONG LISTED FIRST.
SELECT NAME, MILLISECONDS FROM TRACK WHERE MILLISECONDS>(
SELECT AVG(MILLISECONDS) AS AVG_TRACK_LENGTH FROM TRACK)
ORDER BY MILLISECONDS DESC






